#!/usr/bin/env ruby
# frozen_string_literal: true

# builtins
require 'pathname'
require 'optparse'
require 'ostruct'

# Determine path of mkgen (following symlinks)
PATH = Pathname.new(__FILE__).realpath.parent

Dir.chdir(PATH) do
  # Set up bundler
  require 'rubygems'
  require 'bundler/setup'

  # external dependencies
  require 'liquid'
  require 'toml'
end

# Path to template
TEMPLATE_PATH = PATH / 'Makefile.liquid'

# Parsed template
TEMPLATE = Liquid::Template.parse(TEMPLATE_PATH.read)

# Flatten one layer of a hash into a list, dropping keys.
#
# @param [Hash] hash to flatten
# @return [Array] flattened hash as list
def flatten_hash_to_list(hash)
  return [] if hash.nil?

  hash.flatten.select { |value| value.is_a?(Hash) }
end

# Assign containers to pods, adding containers list to each.
#
# @param [Array] list of pods
# @return [nil]
def assign_containers_to_pods!(pods, containers)
  pods.each do |pod|
    pod['containers'] = containers.select do |container|
      container.key?('pod') && container['pod'] == pod['name']
    end
  end
end

# Read in a configuration file and return the rendered Makefile
#
# @param [Pathname] path to configuration file to load
# @return [String] rendered Makefile
def render(config_file)
  config = TOML.load_file(config_file)
  pods = flatten_hash_to_list(config['pod'])
  conts = flatten_hash_to_list(config['container'])

  assign_containers_to_pods!(pods, conts)

  context = {
    'pods' => pods,
    'containers' => conts
  }

  # Ruby will automatically return the value of the last expression in a
  # function though you can explicity use the 'return' statement still.
  # However, doing so is discouraged and 'return' is instead used only for
  # early returns.
  TEMPLATE.render(context)
end

options = OpenStruct.new
OptionParser.new do |opt|
  opt.on('-f', '--file FILE', 'Config file') { |o| options.file = o }
  opt.on('-o', '--out OUTFILE', 'Output file') { |o| options.out = o }
end.parse!

if options.file == nil
  options.file = 'containers.toml'
end

if options.out == nil
  options.out = STDOUT
else
  options.out = File.open(options.out,'w') 
end

status = 0

begin
  options.out.puts render options.file 
rescue Exception => e
  puts e.message
  status = 1
ensure
  options.out.close
end

exit status
